import { create } from 'zustand';
import apiProvider from '../providers/apiProvider';

const useAuthStore = create((set, get) => ({
  // Í∞úÎ∞úÌï† Îïå ÏÇ¨Ïö©ÌïòÎäî user Ï†ïÎ≥¥(Ï∂îÌõÑ ÏÇ≠Ï†ú)
  user: null,
  isAuthenticated: false, // Ï≤òÏùå ÏãúÏûëÏùÄ Î¨¥Ï°∞Í±¥ false
  accessToken: null,
  refreshToken: null,
  isLoading: false,
  error: null,
  navigationRef: null, // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï∞∏Ï°∞ Ï†ÄÏû•
  role: null,

  //Î°úÍ∑∏Ïù∏ Ïï°ÏÖò
  login: async (credentials) => {
    set({ isLoading: true, error: null });
    try {
      const response = await apiProvider.login(credentials);
      
      // API ÏùëÎãµÏóêÏÑú ÌÜ†ÌÅ∞ Ï∂îÏ∂ú
      const { accessToken, refreshToken } = response;
      
      // ÌÜ†ÌÅ∞ÏùÑ zustand ÏÉÅÌÉúÏóê Ï†ÄÏû•
      set({
        accessToken,
        refreshToken,
      });
      
      // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
      let user = null;
      try {
        // ÏïΩÍ∞ÑÏùò ÎîúÎ†àÏù¥ (ÏûÑÏãú ÎîîÎ≤ÑÍπÖÏö©)        
        await new Promise((resolve) => setTimeout(resolve, 100)); // 100ms ÎåÄÍ∏∞

        user = await apiProvider.getUserInfo();
      } catch (error) {
        console.warn('Failed to fetch user info:', error);
        // ÏûÑÏãúÎ°ú Í∏∞Î≥∏ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÑ§Ï†ï (ÌÜ†ÌÅ∞ÏóêÏÑú Ï∂îÏ∂ú Í∞ÄÎä•Ìïú Ï†ïÎ≥¥ ÏÇ¨Ïö©)
        // user = {
        //   id: 0,
        //   username: credentials.userId,
        //   name: 'ÍπÄÎ≥¥Ìò∏',
        //   gender: 'MALE',
        //   birthDate: '2000-01-01',
        //   role: 'GUARDIAN',
        //   createdAt: '2025-08-02T04:42:06.610Z',
        //   updatedAt: '2025-08-02T04:42:06.610Z',
        // };
      }
      set({
        user,
        isAuthenticated: true,
        accessToken,
        refreshToken,
        isLoading: false,
        error: null,
        role: user.role,
      });
      
      console.log('ÌÜ†ÌÅ∞Ïù¥ ÏÇ¥ÏïÑÏûàÎäîÏßÄ ÌôïÏù∏:', accessToken?.substring(0, 20) + '...');
      return { success: true, user };
    } catch (error) {
      console.error('Login error:', error);
      console.error('Login error:', error.response);
      set({
        isLoading: false,
        error: error.message || 'Î°úÍ∑∏Ïù∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
      });
      throw error;
    }
  },

  // ÌöåÏõêÍ∞ÄÏûÖ Ïï°ÏÖò (ÏûêÎèô Î°úÍ∑∏Ïù∏ Ìè¨Ìï®)
  register: async (userData) => {
    set({ isLoading: true, error: null });
    try {
      // 1. ÌöåÏõêÍ∞ÄÏûÖ API Ìò∏Ï∂ú
      console.log('Starting registration process...');
      const signupResponse = await apiProvider.signup(userData);
      // console.log('Signup successful:', signupResponse);
      // console.log('Signup userData', userData);
      
      // 2. ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ ÌõÑ ÏûêÎèô Î°úÍ∑∏Ïù∏
      console.log('Auto-login after successful signup...');
      const loginResponse = await apiProvider.login({
        userId: userData.username,
        password: userData.password,
      });
      // console.log('loginResponse', loginResponse);
      
      // 3. Î°úÍ∑∏Ïù∏ ÏùëÎãµÏóêÏÑú ÌÜ†ÌÅ∞ Ï∂îÏ∂ú
      if (!loginResponse || !loginResponse.accessToken) {
        throw new Error('Î°úÍ∑∏Ïù∏ ÏùëÎãµÏóêÏÑú ÌÜ†ÌÅ∞ÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§.');
      }
      
      const { accessToken, refreshToken } = loginResponse;
      
      // 4. zustand ÏÉÅÌÉúÏóê Ï†ÄÏû•
      set({
        accessToken,
        refreshToken,
      });

      // 5. ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Í∞ÄÏ†∏Ïò§Í∏∞
      let user = null;
      try {
        user = await apiProvider.getUserInfo();
      } catch (error) {
        console.warn('Failed to fetch user info:', error);
        // ÏûÑÏãúÎ°ú Í∏∞Î≥∏ ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÑ§Ï†ï
        user = {
          id: null,
          username: userData.username,
          role: userData.role || 'GUARDIAN',
        };
      }
      
      // 5. ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      set({
        user,
        isAuthenticated: true,
        accessToken,
        refreshToken,
        isLoading: false,
        error: null,
      });

      console.log('Registration and auto-login completed successfully');
      return { success: true, user };
    } catch (error) {
      console.log(error);
      console.error('Registration error:', error);
      set({
        isLoading: false,
        error: error.message || 'ÌöåÏõêÍ∞ÄÏûÖÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.',
      });
      throw error;
    }
  },

  // Î°úÍ∑∏ÏïÑÏõÉ Ïï°ÏÖò
  logout: async () => {
    // zustand ÏÉÅÌÉúÏóêÏÑú ÌÜ†ÌÅ∞ ÏÇ≠Ï†ú
    set({
      user: null,
      isAuthenticated: false,
      accessToken: null,
      refreshToken: null,
      error: null,
    });

    // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖòÏù¥ ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏúºÎ©¥ Î°úÍ∑∏Ïù∏ ÌôîÎ©¥ÏúºÎ°ú Ïù¥Îèô
    const { navigationRef } = get();
    if (navigationRef) {
      navigationRef.reset({
        index: 0,
        routes: [{ name: 'Auth' }],
      });
    }
  },

  // Í∞ïÏ†ú Î°úÍ∑∏ÏïÑÏõÉ Ïï°ÏÖò (ÌÜ†ÌÅ∞ ÎßåÎ£å Ïãú)
  forceLogout: async () => {
    console.log('üîÑ Í∞ïÏ†ú Î°úÍ∑∏ÏïÑÏõÉ Ïã§Ìñâ...');
    await get().logout();
  },

  // ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò Ï∞∏Ï°∞ ÏÑ§Ï†ï
  setNavigationRef: (ref) => set({ navigationRef: ref }),

  // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏÑ§Ï†ï
  setUser: (user) => set({ user }),

  // Ïù∏Ï¶ù ÏÉÅÌÉú ÏÑ§Ï†ï
  setIsAuthenticated: (isAuthenticated) => set({ isAuthenticated }),

  // ÌÜ†ÌÅ∞ ÏÑ§Ï†ï
  setTokens: (accessToken, refreshToken) => set({ accessToken, refreshToken }),

  // ÏóêÎü¨ ÏÑ§Ï†ï
  setError: (error) => set({ error }),

  // Î°úÎî© ÏÉÅÌÉú ÏÑ§Ï†ï
  setLoading: (isLoading) => set({ isLoading }),

  // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
  fetchUserInfo: async () => {
    const { accessToken } = get();
    if (!accessToken) return;

    try {
      const user = await apiProvider.getUserInfo();
      set({ user });
    } catch (error) {
      console.error('Fetch user info error:', error);
      // ÌÜ†ÌÅ∞Ïù¥ ÎßåÎ£åÎêú Í≤ΩÏö∞ Î°úÍ∑∏ÏïÑÏõÉ (Ïù¥Ï†ú Ïù∏ÌÑ∞ÏÖâÌÑ∞ÏóêÏÑú Ï≤òÎ¶¨Îê®)
      if (error.message.includes('401')) {
        get().logout();
      }
    }
  },

  // ÌÜ†ÌÅ∞ Í∞±Ïã†
  refreshAccessToken: async () => {
    const { refreshToken } = get();
    if (!refreshToken) return false;

    try {
      const response = await apiProvider.refreshToken(refreshToken);
      const { accessToken, newRefreshToken } = response;
      
      set({
        accessToken,
        refreshToken: newRefreshToken || refreshToken,
      });
      
      return true;
    } catch (error) {
      console.error('Token refresh error:', error);
      get().logout();
      return false;
    }
  },
}));

// apiProviderÏóê store Ï∞∏Ï°∞ ÏÑ§Ï†ï
apiProvider.setAuthStore(useAuthStore);

export { useAuthStore };
